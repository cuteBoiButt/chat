# This file was auto-generated by a script.
#
# This triplet implements a mixed linkage strategy with lto.

set(VCPKG_TARGET_ARCHITECTURE x64)
set(VCPKG_CRT_LINKAGE dynamic)
set(VCPKG_CMAKE_SYSTEM_NAME Linux)

# Compiler Flags for C++ (Release)
set(VCPKG_CXX_FLAGS_RELEASE "${VCPKG_CXX_FLAGS_RELEASE} -flto")

# Compiler Flags for C (Release)
set(VCPKG_C_FLAGS_RELEASE "${VCPKG_C_FLAGS_RELEASE} -flto")

# Linker Flags for Release
set(VCPKG_LINKER_FLAGS_RELEASE "${VCPKG_LINKER_FLAGS_RELEASE} -flto")

# 1. Define the list of ports that should be linked statically
#    (Generated from license analysis)
set(STATICALLY_LINKED_PORTS
    abseil
    ada-idna
    ada-url
    argon2
    brotli
    bzip2
    c-ares
    cairo
    curl
    dbus
    dirent
    drogon
    egl-registry
    expat
    fontconfig
    freetype
    harfbuzz
    jsoncpp
    libcap
    libepoxy
    libffi
    libjpeg-turbo
    liblzma
    libpng
    libpq
    libuuid
    libxml2
    lz4
    nanosvg
    opengl-registry
    openssl
    pcre2
    pixman
    protobuf
    pthreads
    sdl2
    tiff
    trantor
    utf8-range
    wxwidgets
    zlib
    zstd
)

# 2. Create a regex string from the list
string(REPLACE ";" "|" STATICALLY_LINKED_PORTS_REGEX "${STATICALLY_LINKED_PORTS}")

# 3. Explicitly set linkage based on whether the current port is in the list
if(PORT MATCHES "^(${STATICALLY_LINKED_PORTS_REGEX})$")
    # Port is in our safe list, link it statically.
    set(VCPKG_LIBRARY_LINKAGE static)
else()
    # Port is not in the list, link it dynamically.
    set(VCPKG_LIBRARY_LINKAGE dynamic)
    set(VCPKG_FIXUP_ELF_RPATH ON)
endif()
